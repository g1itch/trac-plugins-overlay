--- announcer/distributors/email_distributor.py	(revision 10497)
+++ announcer/distributors/email_distributor.py	(working copy)
@@ -287,13 +287,10 @@
         else:
             raise TracError(_('Invalid email encoding setting: %s'%pref))
 
-    def _message_id(self, realm):
+    def _message_id(self, event, event_id, modtime):
         """Generate a predictable, but sufficiently unique message ID."""
-        modtime = time.time()
-        rand = random.randint(0,32000)
-        s = '%s.%d.%d.%s' % (self.env.project_url,
-                          modtime, rand,
-                          realm.encode('ascii', 'ignore'))
+        s = '%s.%s.%d' % (self.env.project_url,
+                          event_id, modtime)
         dig = md5(s).hexdigest()
         host = self.smtp_from[self.smtp_from.find('@') + 1:]
         msgid = '<%03d.%s@%s>' % (len(s), dig, host)
@@ -333,13 +330,15 @@
         rootMessage['X-Announcer-Version'] = announcer_version
         rootMessage['X-Trac-Project'] = proj_name
         rootMessage['X-Trac-Announcement-Realm'] = event.realm
-        rootMessage['X-Trac-Announcement-ID'] = self._event_id(event)
+        event_id = self._event_id(event)
+        rootMessage['X-Trac-Announcement-ID'] = event_id
         if self.set_message_id:
-            msgid = self._message_id(event.realm)
-            rootMessage['Message-ID'] = msgid
-        if event.category is not 'created':
+            msgid = self._message_id(event, event_id, 0)
             rootMessage['In-Reply-To'] = msgid
             rootMessage['References'] = msgid
+            if event.category is not 'created':
+                msgid = self._message_id(event, event_id, time.time())
+            rootMessage['Message-ID'] = msgid
         rootMessage['Precedence'] = 'bulk'
         rootMessage['Auto-Submitted'] = 'auto-generated'
         provided_headers = formatter.format_headers(transport, event.realm, 
